# .github/workflows/cli-ci.yml
name: CLI Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/cli/**'
      - 'modules/core/**'
      - 'formats/**'
      - 'scripts/build-cli.sh'
      - 'scripts/test-cli-comprehensive.sh'
      - '.github/workflows/cli-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'modules/cli/**'
      - 'modules/core/**'
      - 'formats/**'

jobs:
  # Job 1: Build and test JAR
  build-jar:
    name: Build JAR and Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build dependencies
      run: |
        ./gradlew :modules:core:build
        ./gradlew :formats:xml:build
        ./gradlew :formats:json:build
        ./gradlew :formats:csv:build
    
    - name: Build CLI JAR
      run: ./gradlew :modules:cli:jar
    
    - name: Run unit tests
      run: ./gradlew :modules:cli:test
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-jar
        path: modules/cli/build/reports/tests/test/
    
    - name: Run comprehensive integration tests
      run: |
        chmod +x scripts/test-cli-comprehensive.sh
        ./scripts/test-cli-comprehensive.sh
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: utlx-cli-jar
        path: modules/cli/build/libs/cli-*.jar
    
    - name: Check JAR size
      run: |
        JAR_SIZE=$(du -h modules/cli/build/libs/cli-1.0.0-SNAPSHOT.jar | cut -f1)
        echo "JAR size: $JAR_SIZE"
        echo "jar_size=$JAR_SIZE" >> $GITHUB_ENV

  # Job 2: Build native binary
  build-native:
    name: Build Native Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact-name: utlx-linux-x64
          - os: macos-latest
            artifact-name: utlx-macos-arm64
          - os: windows-latest
            artifact-name: utlx-windows-x64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        distribution: 'graalvm'
        java-version: '17'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify GraalVM installation
      run: |
        echo "JAVA_HOME: $JAVA_HOME"
        java -version
        native-image --version
    
    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x gradlew
    
    - name: Build dependencies
      run: |
        ./gradlew :modules:core:build
        ./gradlew :formats:xml:build
        ./gradlew :formats:json:build
        ./gradlew :formats:csv:build
    
    - name: Build native binary
      run: ./gradlew :modules:cli:nativeCompile
    
    - name: Test native binary (Unix)
      if: runner.os != 'Windows'
      run: |
        ./modules/cli/build/native/nativeCompile/utlx version
        ./modules/cli/build/native/nativeCompile/utlx --help
    
    - name: Test native binary (Windows)
      if: runner.os == 'Windows'
      run: |
        .\modules\cli\build\native\nativeCompile\utlx.exe version
        .\modules\cli\build\native\nativeCompile\utlx.exe --help
    
    - name: Upload native binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          modules/cli/build/native/nativeCompile/utlx
          modules/cli/build/native/nativeCompile/utlx.exe
    
    - name: Check binary size (Unix)
      if: runner.os != 'Windows'
      run: |
        BINARY_SIZE=$(du -h modules/cli/build/native/nativeCompile/utlx | cut -f1)
        echo "Native binary size: $BINARY_SIZE"

  # Job 3: Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-jar
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: utlx-cli-jar
        path: modules/cli/build/libs/
    
    - name: Create test files
      run: |
        mkdir -p test-workspace
        
        # Create XML test file
        cat > test-workspace/test.xml << 'EOF'
        <data>
          <item id="1">Test Item</item>
        </data>
        EOF
        
        # Create JSON test file
        cat > test-workspace/test.json << 'EOF'
        {
          "data": {
            "item": {
              "id": "1",
              "name": "Test Item"
            }
          }
        }
        EOF
        
        # Create transform script
        cat > test-workspace/transform.utlx << 'EOF'
        %utlx 1.0
        input auto
        output json
        ---
        {
          result: "success",
          data: input
        }
        EOF
    
    - name: Run XML transformation test
      run: |
        java -jar modules/cli/build/libs/cli-*.jar \
          transform test-workspace/test.xml \
          test-workspace/transform.utlx \
          -o test-workspace/output-xml.json
        
        if [ ! -f test-workspace/output-xml.json ]; then
          echo "Error: Output file not created"
          exit 1
        fi
        
        echo "XML transformation successful"
        cat test-workspace/output-xml.json
    
    - name: Run JSON transformation test
      run: |
        java -jar modules/cli/build/libs/cli-*.jar \
          transform test-workspace/test.json \
          test-workspace/transform.utlx \
          -o test-workspace/output-json.json
        
        if [ ! -f test-workspace/output-json.json ]; then
          echo "Error: Output file not created"
          exit 1
        fi
        
        echo "JSON transformation successful"
        cat test-workspace/output-json.json
    
    - name: Test stdin/stdout pipeline
      run: |
        cat test-workspace/test.json | \
          java -jar modules/cli/build/libs/cli-*.jar \
          transform test-workspace/transform.utlx \
          > test-workspace/piped-output.json
        
        echo "Pipeline test successful"
        cat test-workspace/piped-output.json
    
    - name: Test validation
      run: |
        java -jar modules/cli/build/libs/cli-*.jar \
          validate test-workspace/transform.utlx -v

  # Job 4: Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Run Kotlin linter
      run: ./gradlew :modules:cli:kotlinCheck || true
    
    - name: Check code formatting
      run: |
        echo "Checking Kotlin code style..."
        # Add ktlint or detekt here if configured
    
    - name: Generate test coverage report
      run: |
        ./gradlew :modules:cli:jacocoTestReport || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: modules/cli/build/reports/jacoco/test/jacocoTestReport.xml
        flags: cli
        name: cli-coverage
      continue-on-error: true

  # Job 5: Performance benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build-jar
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: utlx-cli-jar
        path: modules/cli/build/libs/
    
    - name: Create benchmark test file
      run: |
        # Create a larger test file
        python3 << 'PYTHON'
        import json
        data = {
          "items": [
            {"id": i, "name": f"Item {i}", "value": i * 10}
            for i in range(1000)
          ]
        }
        with open("benchmark-input.json", "w") as f:
          json.dump(data, f)
        PYTHON
        
        cat > benchmark-transform.utlx << 'EOF'
        %utlx 1.0
        input json
        output json
        ---
        {
          totalItems: count(input.items),
          totalValue: sum(input.items.(value)),
          processedItems: input.items |> map(item => {
            id: item.id,
            doubled: item.value * 2
          })
        }
        EOF
    
    - name: Run performance test
      run: |
        echo "Running performance benchmark..."
        START=$(date +%s%N)
        
        for i in {1..10}; do
          java -jar modules/cli/build/libs/cli-*.jar \
            transform benchmark-input.json \
            benchmark-transform.utlx \
            > /dev/null
        done
        
        END=$(date +%s%N)
        DURATION=$((($END - $START) / 10000000))
        
        echo "Average execution time: ${DURATION}ms"
        
        # Fail if performance is too slow
        if [ $DURATION -gt 500 ]; then
          echo "Warning: Performance slower than expected"
        fi

  # Job 6: Release preparation (on main branch)
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [build-jar, build-native, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: List artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -lR
    
    - name: Create release summary
      run: |
        echo "# UTL-X CLI Build Summary" > release-summary.md
        echo "" >> release-summary.md
        echo "## Build Information" >> release-summary.md
        echo "- Commit: ${{ github.sha }}" >> release-summary.md
        echo "- Branch: ${{ github.ref }}" >> release-summary.md
        echo "- Build date: $(date -u)" >> release-summary.md
        echo "" >> release-summary.md
        echo "## Artifacts" >> release-summary.md
        echo "- JAR: Available" >> release-summary.md
        echo "- Linux x64 binary: Available" >> release-summary.md
        echo "- macOS ARM64 binary: Available" >> release-summary.md
        echo "- Windows x64 binary: Available" >> release-summary.md
    
    - name: Upload release summary
      uses: actions/upload-artifact@v4
      with:
        name: release-summary
        path: release-summary.md

# Job status notifications
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-jar, build-native, integration-tests]
    if: always()
    
    steps:
    - name: Build status
      run: |
        if [ "${{ needs.build-jar.result }}" == "success" ] && \
           [ "${{ needs.build-native.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✓ All builds successful!"
        else
          echo "✗ Some builds failed"
          exit 1
        fi

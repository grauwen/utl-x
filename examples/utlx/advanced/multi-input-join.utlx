# Multi-input join example

%utlx 1.0
input {
  orders: json,
  customers: json,
  products: json
}
output json
---

// Create efficient lookup maps
let customerMap = input.customers.customers 
  |> map(c => [c.id, c])
  |> reduce((acc, [id, c]) => {...acc, [id]: c}, {}),

let productMap = input.products.products
  |> map(p => [p.id, p])
  |> reduce((acc, [id, p]) => {...acc, [id]: p}, {})

// Join orders with customers and products
{
  results: input.orders.orders |> map(order => {
    let customer = customerMap[order.customerId] ?? {
      name: "Unknown Customer",
      tier: "Standard"
    },
    
    let product = productMap[order.productId] ?? {
      name: "Unknown Product",
      price: 0
    },
    
    let subtotal = product.price * order.quantity,
    let discount = match customer.tier {
      "Gold" => 0.15,
      "Silver" => 0.10,
      _ => 0
    },
    
    {
      orderId: order.orderId,
      customerName: customer.name,
      customerTier: customer.tier,
      productName: product.name,
      quantity: order.quantity,
      subtotal: subtotal,
      discount: subtotal * discount,
      total: subtotal * (1 - discount)
    }
  })
}

# Run with:
# utlx transform multi-input-join.utlx \
#   --input orders=orders.json \
#   --input customers=customers.json \
#   --input products=products.json

---

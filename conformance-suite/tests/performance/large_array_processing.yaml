name: "large_array_processing"
category: "performance"
description: "Performance test for processing large arrays"
tags: ["performance", "array", "map", "filter", "scalability"]

input:
  format: json
  data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

transformation: |
  %utlx 1.0
  input json
  output json
  ---
  reduce(filter(map(@input, x -> x * x), x -> x % 2 == 0), (acc, x) -> acc + x, 0)

expected:
  format: json
  data: 171700

performance_limits:
  max_duration_ms: 500
  max_memory_mb: 50
  max_iterations: 100

variants:
  - name: "thousand_elements"
    # Test with 1000 elements (generated data)
    input:
      format: json
      data: [] # Would be generated with 1-1000
    expected:
      format: json
      data: 0 # Placeholder - would be calculated
    performance_limits:
      max_duration_ms: 2000
      max_memory_mb: 100
      
  - name: "simple_mapping"
    input:
      format: json
      data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    transformation: |
      %utlx 1.0
      input json
      output json
      ---
      map(@input, x -> x * x)
    expected:
      format: json
      data: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    performance_limits:
      max_duration_ms: 100
      max_memory_mb: 10

metadata:
  author: "UTL-X Team"
  created: "2024-01-15"
  references: ["UTL-X Performance Guidelines"]
name: "yaml_config_processing"
category: "examples/intermediate"
description: "YAML configuration processing with environment variable substitution"
tags: ["yaml", "configuration", "environment", "templating", "intermediate"]

input:
  format: yaml
  data: |
    application:
      name: "MyApp"
      version: "1.2.3"
      environment: "${ENV:-production}"
      
    database:
      host: "${DB_HOST:-localhost}"
      port: "${DB_PORT:-5432}"
      name: "${DB_NAME:-myapp_db}"
      username: "${DB_USER:-admin}"
      password: "${DB_PASS:-secret123}"
      pool_size: "${DB_POOL_SIZE:-10}"
      
    cache:
      redis:
        enabled: "${REDIS_ENABLED:-true}"
        host: "${REDIS_HOST:-localhost}"
        port: "${REDIS_PORT:-6379}"
        ttl: "${CACHE_TTL:-3600}"
        
    features:
      - name: "user_registration"
        enabled: true
        config:
          max_users: "${MAX_USERS:-1000}"
          email_verification: true
      - name: "analytics"
        enabled: "${ANALYTICS_ENABLED:-false}"
        config:
          provider: "google"
          tracking_id: "${GA_TRACKING_ID:-}"
          
    logging:
      level: "${LOG_LEVEL:-INFO}"
      outputs:
        - type: "console"
        - type: "file"
          path: "${LOG_FILE:-/var/log/myapp.log}"

transformation: |
  %utlx 1.0
  input yaml
  output json
  ---
  let env_vars = {
    "ENV": "staging",
    "DB_HOST": "db.staging.com",
    "DB_PORT": "5433", 
    "DB_NAME": "myapp_staging",
    "DB_USER": "staging_user",
    "REDIS_ENABLED": "false",
    "MAX_USERS": "500",
    "ANALYTICS_ENABLED": "true",
    "GA_TRACKING_ID": "GA-123456789",
    "LOG_LEVEL": "DEBUG"
  }
  
  {
    config: processConfig(@input, env_vars),
    metadata: {
      resolved_variables: extractVariables(@input),
      environment: env_vars.ENV,
      config_validation: validateConfig(processConfig(@input, env_vars))
    }
  }
  
  def processConfig(config, env_vars) {
    substituteVariables(config, env_vars)
  }
  
  def substituteVariables(obj, env_vars) {
    if (isString(obj)) {
      resolveVariable(obj, env_vars)
    } else if (isArray(obj)) {
      map(obj, item -> substituteVariables(item, env_vars))
    } else if (isObject(obj)) {
      let entries = map(keys(obj), key -> {
        key: key,
        value: substituteVariables(obj[key], env_vars)
      })
      fromEntries(map(entries, entry -> [entry.key, entry.value]))
    } else {
      obj
    }
  }
  
  def resolveVariable(str, env_vars) {
    if (matches(str, "\\$\\{([^}]+)\\}")) {
      let variable = extractBetween(str, "${", "}")
      let parts = split(variable, ":-")
      let var_name = parts[0]
      let default_value = if (count(parts) > 1) parts[1] else ""
      
      let resolved = if (hasKey(env_vars, var_name)) env_vars[var_name] else default_value
      
      # Convert to appropriate type
      if (matches(resolved, "^\\d+$")) toNumber(resolved)
      else if (lower(resolved) == "true") true
      else if (lower(resolved) == "false") false  
      else resolved
    } else {
      str
    }
  }
  
  def extractVariables(obj) {
    if (isString(obj) && matches(obj, "\\$\\{([^}]+)\\}")) {
      [extractBetween(obj, "${", "}")]
    } else if (isArray(obj)) {
      flatten(map(obj, item -> extractVariables(item)))
    } else if (isObject(obj)) {
      flatten(map(values(obj), value -> extractVariables(value)))
    } else {
      []
    }
  }
  
  def validateConfig(config) {
    {
      has_database: hasKey(config, "database"),
      database_host_set: config.database.host != "",
      redis_configured: config.cache.redis.enabled == false || config.cache.redis.host != "",
      features_enabled: count(filter(config.features, feature -> feature.enabled == true)) > 0,
      logging_level_valid: contains(["DEBUG", "INFO", "WARN", "ERROR"], config.logging.level)
    }
  }

expected:
  format: json
  data: |
    {
      "config": {
        "application": {
          "name": "MyApp",
          "version": "1.2.3", 
          "environment": "staging"
        },
        "database": {
          "host": "db.staging.com",
          "port": 5433,
          "name": "myapp_staging",
          "username": "staging_user",
          "password": "secret123",
          "pool_size": 10
        },
        "cache": {
          "redis": {
            "enabled": false,
            "host": "localhost",
            "port": 6379,
            "ttl": 3600
          }
        },
        "features": [
          {
            "name": "user_registration",
            "enabled": true,
            "config": {
              "max_users": 500,
              "email_verification": true
            }
          },
          {
            "name": "analytics",
            "enabled": true,
            "config": {
              "provider": "google",
              "tracking_id": "GA-123456789"
            }
          }
        ],
        "logging": {
          "level": "DEBUG",
          "outputs": [
            {
              "type": "console"
            },
            {
              "type": "file",
              "path": "/var/log/myapp.log"
            }
          ]
        }
      },
      "metadata": {
        "resolved_variables": [
          "ENV:-production",
          "DB_HOST:-localhost", 
          "DB_PORT:-5432",
          "DB_NAME:-myapp_db",
          "DB_USER:-admin",
          "DB_PASS:-secret123",
          "DB_POOL_SIZE:-10",
          "REDIS_ENABLED:-true",
          "REDIS_HOST:-localhost",
          "REDIS_PORT:-6379",
          "CACHE_TTL:-3600",
          "MAX_USERS:-1000",
          "ANALYTICS_ENABLED:-false",
          "GA_TRACKING_ID:-",
          "LOG_LEVEL:-INFO",
          "LOG_FILE:-/var/log/myapp.log"
        ],
        "environment": "staging",
        "config_validation": {
          "has_database": true,
          "database_host_set": true,
          "redis_configured": true,
          "features_enabled": true,
          "logging_level_valid": true
        }
      }
    }

performance_limits:
  max_duration_ms: 500
  max_memory_mb: 25

metadata:
  author: "UTL-X Documentation"
  source: "docs/examples/configuration-management.md"
  complexity: "intermediate"
  notes: ["YAML processing, environment variable substitution, configuration validation"]
name: "multi_input_json_yaml_to_yaml"
category: "multi-input"
description: "JSON and YAML inputs merged to YAML output - Kubernetes deployment with Helm values"
tags: ["multi-input", "json", "yaml", "kubernetes", "helm"]

inputs:
  deployments:
    format: json
    data: |
      {
        "applications": [
          {
            "appId": "APP001",
            "name": "frontend",
            "namespace": "production",
            "image": "company/frontend:v2.3.1",
            "containerPort": 3000,
            "serviceType": "LoadBalancer"
          },
          {
            "appId": "APP002",
            "name": "backend",
            "namespace": "production",
            "image": "company/backend:v1.8.5",
            "containerPort": 8080,
            "serviceType": "ClusterIP"
          },
          {
            "appId": "APP003",
            "name": "worker",
            "namespace": "production",
            "image": "company/worker:v1.2.0",
            "containerPort": 9090,
            "serviceType": "ClusterIP"
          }
        ]
      }

  helmValues:
    format: yaml
    data: |
      helmConfig:
        - appId: APP001
          replicas: 3
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          ingress:
            enabled: true
            host: app.company.com
            tls: true
        - appId: APP002
          replicas: 5
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 2000m
              memory: 2Gi
          ingress:
            enabled: false
        - appId: APP003
          replicas: 2
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          ingress:
            enabled: false

transformation: |
  %utlx 1.0
  input: deployments json, helmValues yaml
  output yaml
  ---
  {
    apiVersion: "apps/v1",
    kind: "DeploymentSet",
    metadata: {
      generatedFrom: "JSON+YAML",
      timestamp: "2025-10-21T10:00:00Z"
    },
    spec: {
      deployments: @deployments.applications |> map(app => {
        let appId = app.appId
        let helm = @helmValues.helmConfig |> filter(h => h.appId == appId) |> first()

        {
          name: app.name,
          namespace: app.namespace,
          replicas: helm.replicas,
          selector: {
            matchLabels: {
              app: app.name
            }
          },
          template: {
            metadata: {
              labels: {
                app: app.name,
                appId: appId
              }
            },
            spec: {
              containers: [
                {
                  name: app.name,
                  image: app.image,
                  ports: [
                    {
                      containerPort: app.containerPort
                    }
                  ],
                  resources: helm.resources
                }
              ]
            }
          },
          service: {
            type: app.serviceType,
            ports: [
              {
                port: 80,
                targetPort: app.containerPort
              }
            ]
          },
          ingress: if (helm.ingress.enabled) {
            {
              enabled: true,
              host: helm.ingress.host,
              tls: helm.ingress.tls
            }
          } else {
            {
              enabled: false
            }
          }
        }
      })
    }
  }

expected:
  format: yaml
  data: |
    apiVersion: apps/v1
    kind: DeploymentSet
    metadata:
      generatedFrom: JSON+YAML
      timestamp: '2025-10-21T10:00:00Z'
    spec:
      deployments:
        - name: frontend
          namespace: production
          replicas: 3
          selector:
            matchLabels:
              app: frontend
          template:
            metadata:
              labels:
                app: frontend
                appId: APP001
            spec:
              containers:
                - name: frontend
                  image: company/frontend:v2.3.1
                  ports:
                    - containerPort: 3000
                  resources:
                    requests:
                      cpu: 100m
                      memory: 128Mi
                    limits:
                      cpu: 500m
                      memory: 512Mi
          service:
            type: LoadBalancer
            ports:
              - port: 80
                targetPort: 3000
          ingress:
            enabled: true
            host: app.company.com
            tls: true
        - name: backend
          namespace: production
          replicas: 5
          selector:
            matchLabels:
              app: backend
          template:
            metadata:
              labels:
                app: backend
                appId: APP002
            spec:
              containers:
                - name: backend
                  image: company/backend:v1.8.5
                  ports:
                    - containerPort: 8080
                  resources:
                    requests:
                      cpu: 500m
                      memory: 512Mi
                    limits:
                      cpu: 2000m
                      memory: 2Gi
          service:
            type: ClusterIP
            ports:
              - port: 80
                targetPort: 8080
          ingress:
            enabled: false
        - name: worker
          namespace: production
          replicas: 2
          selector:
            matchLabels:
              app: worker
          template:
            metadata:
              labels:
                app: worker
                appId: APP003
            spec:
              containers:
                - name: worker
                  image: company/worker:v1.2.0
                  ports:
                    - containerPort: 9090
                  resources:
                    requests:
                      cpu: 250m
                      memory: 256Mi
                    limits:
                      cpu: 1000m
                      memory: 1Gi
          service:
            type: ClusterIP
            ports:
              - port: 80
                targetPort: 9090
          ingress:
            enabled: false

performance_limits:
  max_duration_ms: 200
  max_memory_mb: 20

metadata:
  author: "UTL-X Team"
  created_date: "2025-10-21"
  references:
    - "Multiple inputs feature"
    - "JSON to YAML transformation"
    - "Kubernetes + Helm integration"
  notes:
    - "JSON (deployment specs) + YAML (Helm values) â†’ YAML (K8s manifest)"
    - "Complete K8s deployment manifest generation"
    - "Ingress configuration conditional logic"
    - "Common GitOps/Infrastructure-as-Code pattern"

name: "multi_input_yaml_yaml_to_json"
category: "multi-input"
description: "Two YAML inputs merged to JSON output - Microservices with CI/CD pipelines"
tags: ["multi-input", "yaml", "json", "kubernetes", "cicd"]

inputs:
  services:
    format: yaml
    data: |
      microservices:
        - serviceId: MS001
          name: user-service
          port: 8080
          dependencies:
            - database
            - cache
          replicas: 3
        - serviceId: MS002
          name: order-service
          port: 8081
          dependencies:
            - database
            - message-queue
          replicas: 5
        - serviceId: MS003
          name: notification-service
          port: 8082
          dependencies:
            - message-queue
          replicas: 2

  pipelines:
    format: yaml
    data: |
      cicdPipelines:
        - serviceId: MS001
          repository: "github.com/company/user-service"
          branch: main
          buildTool: maven
          testCoverage: 85
          deploymentStages:
            - dev
            - staging
            - production
        - serviceId: MS002
          repository: "github.com/company/order-service"
          branch: main
          buildTool: gradle
          testCoverage: 92
          deploymentStages:
            - dev
            - staging
            - production
        - serviceId: MS003
          repository: "github.com/company/notification-service"
          branch: main
          buildTool: npm
          testCoverage: 78
          deploymentStages:
            - dev
            - production

transformation: |
  %utlx 1.0
  input: services yaml, pipelines yaml
  output json
  ---
  {
    MicroservicesArchitecture: {
      Source: "YAML+YAML",
      Services: @services.microservices |> map(service => {
        let serviceId = service.serviceId
        let pipeline = @pipelines.cicdPipelines |> filter(p => p.serviceId == serviceId) |> first()

        ServiceID: serviceId,
        Name: service.name,
        Port: service.port,
        Dependencies: service.dependencies,
        Replicas: service.replicas,
        CICD: {
          Repository: pipeline.repository,
          Branch: pipeline.branch,
          BuildTool: pipeline.buildTool,
          TestCoverage: pipeline.testCoverage,
          DeploymentStages: pipeline.deploymentStages,
          HasProduction: contains(pipeline.deploymentStages, "production")
        }
      }),
      Statistics: {
        TotalServices: count(@services.microservices),
        TotalReplicas: sum(@services.microservices |> map(s => s.replicas)),
        AverageTestCoverage: sum(@pipelines.cicdPipelines |> map(p => p.testCoverage)) / count(@pipelines.cicdPipelines),
        ProductionServices: count(@pipelines.cicdPipelines |> filter(p => contains(p.deploymentStages, "production")))
      }
    }
  }

expected:
  format: json
  data: |
    {
      "MicroservicesArchitecture": {
        "Source": "YAML+YAML",
        "Services": [
          {
            "ServiceID": "MS001",
            "Name": "user-service",
            "Port": 8080,
            "Dependencies": [
              "database",
              "cache"
            ],
            "Replicas": 3,
            "CICD": {
              "Repository": "github.com/company/user-service",
              "Branch": "main",
              "BuildTool": "maven",
              "TestCoverage": 85,
              "DeploymentStages": [
                "dev",
                "staging",
                "production"
              ],
              "HasProduction": true
            }
          },
          {
            "ServiceID": "MS002",
            "Name": "order-service",
            "Port": 8081,
            "Dependencies": [
              "database",
              "message-queue"
            ],
            "Replicas": 5,
            "CICD": {
              "Repository": "github.com/company/order-service",
              "Branch": "main",
              "BuildTool": "gradle",
              "TestCoverage": 92,
              "DeploymentStages": [
                "dev",
                "staging",
                "production"
              ],
              "HasProduction": true
            }
          },
          {
            "ServiceID": "MS003",
            "Name": "notification-service",
            "Port": 8082,
            "Dependencies": [
              "message-queue"
            ],
            "Replicas": 2,
            "CICD": {
              "Repository": "github.com/company/notification-service",
              "Branch": "main",
              "BuildTool": "npm",
              "TestCoverage": 78,
              "DeploymentStages": [
                "dev",
                "production"
              ],
              "HasProduction": true
            }
          }
        ],
        "Statistics": {
          "TotalServices": 3,
          "TotalReplicas": 10,
          "AverageTestCoverage": 85,
          "ProductionServices": 3
        }
      }
    }

performance_limits:
  max_duration_ms: 200
  max_memory_mb: 20

metadata:
  author: "UTL-X Team"
  created_date: "2025-10-21"
  references:
    - "Multiple inputs feature"
    - "Kubernetes microservices"
    - "CI/CD pipelines"
  notes:
    - "Both inputs are YAML (common in K8s/DevOps)"
    - "Service definitions + CI/CD pipeline config"
    - "Statistics aggregation across services"

name: "multi_input_xml_yaml_to_yaml"
category: "multi-input"
description: "XML and YAML inputs merged to YAML output - Service catalog with monitoring configuration"
tags: ["multi-input", "xml", "yaml", "monitoring", "infrastructure"]

inputs:
  services:
    format: xml
    data: |
      <?xml version="1.0" encoding="UTF-8"?>
      <ServiceCatalog>
        <Service id="SVC001">
          <Name>Web Application Server</Name>
          <Type>web-server</Type>
          <Endpoint>https://web.company.com</Endpoint>
          <CriticalityLevel>high</CriticalityLevel>
        </Service>
        <Service id="SVC002">
          <Name>Database Primary</Name>
          <Type>database</Type>
          <Endpoint>db-primary.internal:5432</Endpoint>
          <CriticalityLevel>critical</CriticalityLevel>
        </Service>
        <Service id="SVC003">
          <Name>Cache Layer</Name>
          <Type>cache</Type>
          <Endpoint>cache.internal:6379</Endpoint>
          <CriticalityLevel>medium</CriticalityLevel>
        </Service>
        <Service id="SVC004">
          <Name>Message Queue</Name>
          <Type>messaging</Type>
          <Endpoint>mq.internal:5672</Endpoint>
          <CriticalityLevel>high</CriticalityLevel>
        </Service>
      </ServiceCatalog>

  monitoring:
    format: yaml
    data: |
      monitoringPolicies:
        - serviceId: SVC001
          checkInterval: 30
          timeoutSeconds: 10
          retries: 3
          alerts:
            - metric: response_time
              threshold: 500
              severity: warning
            - metric: error_rate
              threshold: 5
              severity: critical
          notifications:
            - email
            - slack
        - serviceId: SVC002
          checkInterval: 15
          timeoutSeconds: 5
          retries: 5
          alerts:
            - metric: connection_pool
              threshold: 80
              severity: warning
            - metric: disk_usage
              threshold: 90
              severity: critical
            - metric: replication_lag
              threshold: 10
              severity: critical
          notifications:
            - email
            - slack
            - pagerduty
        - serviceId: SVC003
          checkInterval: 60
          timeoutSeconds: 5
          retries: 2
          alerts:
            - metric: memory_usage
              threshold: 85
              severity: warning
            - metric: eviction_rate
              threshold: 100
              severity: warning
          notifications:
            - email
        - serviceId: SVC004
          checkInterval: 45
          timeoutSeconds: 10
          retries: 3
          alerts:
            - metric: queue_depth
              threshold: 1000
              severity: warning
            - metric: consumer_lag
              threshold: 500
              severity: critical
          notifications:
            - email
            - slack

transformation: |
  %utlx 1.0
  input: services xml, monitoring yaml
  output yaml
  ---
  {
    version: "1.0",
    monitoringConfiguration: {
      generatedDate: "2025-10-21",
      sourceFormats: {
        serviceCatalog: "XML",
        policies: "YAML",
        xmlEncoding: detectXMLEncoding(@services)
      },
      services: @services.ServiceCatalog.Service |> map(svc => {
        let serviceId = svc.@id;
        let policy = @monitoring.monitoringPolicies |> filter(p => p.serviceId == serviceId) |> first();

        {
          serviceId: serviceId,
          name: svc.Name,
          type: svc.Type,
          endpoint: svc.Endpoint,
          criticality: svc.CriticalityLevel,
          healthCheck: {
            intervalSeconds: policy.checkInterval,
            timeoutSeconds: policy.timeoutSeconds,
            retries: policy.retries,
            nextCheckEstimate: "+" + policy.checkInterval + "s"
          },
          alerting: {
            rules: policy.alerts |> map(alert => {
              {
                metric: alert.metric,
                thresholdValue: alert.threshold,
                severity: alert.severity,
                criticalService: svc.CriticalityLevel == "critical"
              }
            }),
            totalAlerts: count(policy.alerts),
            hasCriticalAlerts: count(policy.alerts |> filter(a => a.severity == "critical")) > 0
          },
          notifications: {
            channels: policy.notifications,
            channelCount: count(policy.notifications)
          }
        }
      })
    }
  }

expected:
  format: yaml
  data: |
    version: '1.0'
    monitoringConfiguration:
      generatedDate: '2025-10-21'
      sourceFormats:
        serviceCatalog: XML
        policies: YAML
        xmlEncoding: UTF-8
      services:
        - serviceId: SVC001
          name: Web Application Server
          type: web-server
          endpoint: https://web.company.com
          criticality: high
          healthCheck:
            intervalSeconds: 30
            timeoutSeconds: 10
            retries: 3
            nextCheckEstimate: +30s
          alerting:
            rules:
              - metric: response_time
                thresholdValue: 500
                severity: warning
                criticalService: false
              - metric: error_rate
                thresholdValue: 5
                severity: critical
                criticalService: false
            totalAlerts: 2
            hasCriticalAlerts: true
          notifications:
            channels:
              - email
              - slack
            channelCount: 2
        - serviceId: SVC002
          name: Database Primary
          type: database
          endpoint: db-primary.internal:5432
          criticality: critical
          healthCheck:
            intervalSeconds: 15
            timeoutSeconds: 5
            retries: 5
            nextCheckEstimate: +15s
          alerting:
            rules:
              - metric: connection_pool
                thresholdValue: 80
                severity: warning
                criticalService: true
              - metric: disk_usage
                thresholdValue: 90
                severity: critical
                criticalService: true
              - metric: replication_lag
                thresholdValue: 10
                severity: critical
                criticalService: true
            totalAlerts: 3
            hasCriticalAlerts: true
          notifications:
            channels:
              - email
              - slack
              - pagerduty
            channelCount: 3
        - serviceId: SVC003
          name: Cache Layer
          type: cache
          endpoint: cache.internal:6379
          criticality: medium
          healthCheck:
            intervalSeconds: 60
            timeoutSeconds: 5
            retries: 2
            nextCheckEstimate: +60s
          alerting:
            rules:
              - metric: memory_usage
                thresholdValue: 85
                severity: warning
                criticalService: false
              - metric: eviction_rate
                thresholdValue: 100
                severity: warning
                criticalService: false
            totalAlerts: 2
            hasCriticalAlerts: false
          notifications:
            channels:
              - email
            channelCount: 1
        - serviceId: SVC004
          name: Message Queue
          type: messaging
          endpoint: mq.internal:5672
          criticality: high
          healthCheck:
            intervalSeconds: 45
            timeoutSeconds: 10
            retries: 3
            nextCheckEstimate: +45s
          alerting:
            rules:
              - metric: queue_depth
                thresholdValue: 1000
                severity: warning
                criticalService: false
              - metric: consumer_lag
                thresholdValue: 500
                severity: critical
                criticalService: false
            totalAlerts: 2
            hasCriticalAlerts: true
          notifications:
            channels:
              - email
              - slack
            channelCount: 2

performance_limits:
  max_duration_ms: 250
  max_memory_mb: 20

metadata:
  author: "UTL-X Team"
  created_date: "2025-10-21"
  references:
    - "Multiple inputs feature"
    - "XML to YAML transformation"
    - "Infrastructure monitoring configuration"
  notes:
    - "XML (service catalog) + YAML (monitoring policies) â†’ YAML (monitoring config)"
    - "Service health check configuration"
    - "Alert rule aggregation and analysis"
    - "Common SRE/DevOps monitoring pattern"

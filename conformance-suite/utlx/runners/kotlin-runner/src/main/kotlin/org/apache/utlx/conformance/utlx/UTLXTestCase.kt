package org.apache.utlx.conformance.utlx

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * UTLX conformance test case (same format as Python runner)
 */
data class UTLXTestCase(
    val name: String? = null,  // Optional - will use filename if not provided
    val category: String? = null,  // Optional in some test files
    val description: String? = null,
    val tags: List<String> = emptyList(),
    val input: TestInput? = null,  // Single input (optional)
    val inputs: Map<String, TestInput>? = null,  // Multiple inputs (optional)
    val transformation: String,
    val expected: TestExpected? = null,
    @JsonProperty("error_expected")
    val errorExpected: ErrorExpected? = null,
    @JsonProperty("performance_limits")
    val performanceLimits: PerformanceLimits? = null,
    val variants: List<TestVariant> = emptyList(),
    val metadata: Map<String, Any> = emptyMap(),
    @JsonProperty("known_issue")
    val knownIssue: KnownIssue? = null,
    @JsonProperty("auto_generated")
    val autoGenerated: Boolean? = null,
    @JsonProperty("captured_at")
    val capturedAt: String? = null
)

/**
 * Test input
 */
data class TestInput(
    val format: String,  // json, xml, csv, yaml, etc.
    val data: Any?       // Can be string, structured data, or null
)

/**
 * Expected output
 */
data class TestExpected(
    val format: String,
    val data: Any?       // Can be string, structured data, or null
)

/**
 * Expected error
 */
data class ErrorExpected(
    val type: String,                          // runtime_error, parse_error, etc.
    @JsonProperty("message_pattern")
    val messagePattern: String? = null,        // Regex pattern for error message
    val code: String? = null                   // Error code
)

/**
 * Performance limits
 */
data class PerformanceLimits(
    @JsonProperty("max_duration_ms")
    val maxDurationMs: Long = 5000,
    @JsonProperty("max_memory_mb")
    val maxMemoryMb: Long = 100
)

/**
 * Test variant
 */
data class TestVariant(
    val name: String,
    val input: TestInput? = null,
    val transformation: String? = null,
    val expected: TestExpected? = null,
    @JsonProperty("error_expected")
    val errorExpected: ErrorExpected? = null
)

/**
 * Known issue marker
 */
data class KnownIssue(
    val status: String = "failing",
    @JsonProperty("captured_output")
    val capturedOutput: String? = null,
    @JsonProperty("expected_output")
    val expectedOutput: String? = null,
    @JsonProperty("issue_description")
    val issueDescription: String? = null,
    @JsonProperty("captured_at")
    val capturedAt: String? = null
)

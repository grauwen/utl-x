name: "multi_input_yaml_yaml_to_yaml"
category: "multi-input"
description: "Two YAML inputs merged to YAML output - Microservices with deployment configuration"
tags: ["multi-input", "yaml", "kubernetes", "devops", "deployment"]

inputs:
  services:
    format: yaml
    data: |
      microservices:
        - serviceId: SVC001
          name: user-api
          port: 8080
          image: registry.company.com/user-api:v1.2.3
          healthCheck: /health
          dependencies:
            - database
            - redis-cache
        - serviceId: SVC002
          name: order-api
          port: 8081
          image: registry.company.com/order-api:v2.1.0
          healthCheck: /actuator/health
          dependencies:
            - database
            - message-queue
        - serviceId: SVC003
          name: notification-worker
          port: 8082
          image: registry.company.com/notification-worker:v1.5.2
          healthCheck: /status
          dependencies:
            - message-queue
            - email-service

  deployConfig:
    format: yaml
    data: |
      deploymentSpecs:
        - serviceId: SVC001
          replicas: 3
          resources:
            cpu: "500m"
            memory: "512Mi"
          environment: production
          scaling:
            minReplicas: 2
            maxReplicas: 10
            targetCPU: 70
        - serviceId: SVC002
          replicas: 5
          resources:
            cpu: "1000m"
            memory: "1Gi"
          environment: production
          scaling:
            minReplicas: 3
            maxReplicas: 15
            targetCPU: 75
        - serviceId: SVC003
          replicas: 2
          resources:
            cpu: "250m"
            memory: "256Mi"
          environment: production
          scaling:
            minReplicas: 1
            maxReplicas: 5
            targetCPU: 80

transformation: |
  %utlx 1.0
  input: services yaml, deployConfig yaml
  output yaml
  ---
  {
    apiVersion: "v1",
    kind: "DeploymentManifest",
    metadata: {
      generatedDate: "2025-10-21",
      source: "YAML+YAML"
    },
    deployments: @services.microservices |> map(svc => {
      let serviceId = svc.serviceId;
      let config = @deployConfig.deploymentSpecs |> filter(c => c.serviceId == serviceId) |> first();

      {
        serviceId: serviceId,
        name: svc.name,
        containerImage: svc.image,
        port: svc.port,
        healthCheck: svc.healthCheck,
        replicas: config.replicas,
        environment: config.environment,
        resources: {
          limits: {
            cpu: config.resources.cpu,
            memory: config.resources.memory
          }
        },
        autoscaling: {
          enabled: true,
          minReplicas: config.scaling.minReplicas,
          maxReplicas: config.scaling.maxReplicas,
          targetCPUUtilization: config.scaling.targetCPU
        },
        dependencies: svc.dependencies
      }
    })
  }

expected:
  format: yaml
  data: |
    apiVersion: v1
    kind: DeploymentManifest
    metadata:
      generatedDate: '2025-10-21'
      source: YAML+YAML
    deployments:
      - serviceId: SVC001
        name: user-api
        containerImage: registry.company.com/user-api:v1.2.3
        port: 8080
        healthCheck: /health
        replicas: 3
        environment: production
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
        autoscaling:
          enabled: true
          minReplicas: 2
          maxReplicas: 10
          targetCPUUtilization: 70
        dependencies:
          - database
          - redis-cache
      - serviceId: SVC002
        name: order-api
        containerImage: registry.company.com/order-api:v2.1.0
        port: 8081
        healthCheck: /actuator/health
        replicas: 5
        environment: production
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
        autoscaling:
          enabled: true
          minReplicas: 3
          maxReplicas: 15
          targetCPUUtilization: 75
        dependencies:
          - database
          - message-queue
      - serviceId: SVC003
        name: notification-worker
        containerImage: registry.company.com/notification-worker:v1.5.2
        port: 8082
        healthCheck: /status
        replicas: 2
        environment: production
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
        autoscaling:
          enabled: true
          minReplicas: 1
          maxReplicas: 5
          targetCPUUtilization: 80
        dependencies:
          - message-queue
          - email-service

performance_limits:
  max_duration_ms: 200
  max_memory_mb: 20

metadata:
  author: "UTL-X Team"
  created_date: "2025-10-21"
  references:
    - "Multiple inputs feature"
    - "YAML to YAML transformation"
    - "Kubernetes deployment manifests"
  notes:
    - "YAML + YAML â†’ YAML (round-trip)"
    - "Microservices catalog + Deployment config"
    - "Kubernetes/cloud-native deployment pattern"
    - "Autoscaling configuration merge"
